---
export interface Props {
  categorias: Array<{id: string, nombre: string}>;
  precios: {min: number, max: number};
}

const { categorias, precios } = Astro.props;
---

<!-- Botón para abrir filtros móviles -->
<button id="abrir-filtros-moviles" class="lg:hidden fixed bottom-6 right-6 bg-gradient-to-r from-primary-600 to-primary-700 text-white p-4 rounded-full shadow-lg hover:from-primary-700 hover:to-primary-800 transition-all duration-200 hover:scale-110 z-40 relative">
  <i class="bi bi-funnel text-xl"></i>
  <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold" id="contador-filtros-moviles" style="display: none;">0</span>
</button>

<!-- Overlay de filtros móviles -->
<div id="filtros-moviles-overlay" class="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div class="absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl p-6 max-h-[80vh] overflow-y-auto">
    <div class="flex items-center justify-between mb-6">
      <h3 class="text-xl font-semibold text-gray-900">Filtros</h3>
      <button id="cerrar-filtros-moviles" class="text-gray-500 hover:text-gray-700">
        <i class="bi bi-x text-2xl"></i>
      </button>
    </div>

    <!-- Categorías -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Categorías</h4>
      <div class="space-y-2">
        <label class="flex items-center">
          <input type="checkbox" value="todos" class="filtro-categoria-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500" checked>
          <span class="text-sm text-gray-700">Todas las categorías</span>
        </label>
        {categorias.map(categoria => (
          <label class="flex items-center">
            <input type="checkbox" value={categoria.id} class="filtro-categoria-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
            <span class="text-sm text-gray-700">{categoria.nombre}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Rango de Precios -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Rango de Precios</h4>
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">$<span id="precio-min-movil">0</span></span>
          <span class="text-sm text-gray-600">$<span id="precio-max-movil">{precios.max}</span></span>
        </div>
        <div class="relative">
          <input type="range" id="precio-slider-movil" min={precios.min} max={precios.max} value={precios.max} 
                 class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider">
        </div>
        <div class="flex space-x-2">
          <input type="number" id="precio-min-input-movil" placeholder="Mín" min={precios.min} max={precios.max}
                 class="w-1/2 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent">
          <input type="number" id="precio-max-input-movil" placeholder="Máx" min={precios.min} max={precios.max}
                 class="w-1/2 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent">
        </div>
      </div>
    </div>

    <!-- Ordenar por -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Ordenar por</h4>
      <select id="ordenar-por-movil" class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-primary-500 focus:border-transparent">
        <option value="relevancia">Más relevantes</option>
        <option value="precio-asc">Precio: Menor a Mayor</option>
        <option value="precio-desc">Precio: Mayor a Menor</option>
        <option value="nombre-asc">Nombre: A-Z</option>
        <option value="nombre-desc">Nombre: Z-A</option>
        <option value="nuevos">Más nuevos</option>
      </select>
    </div>

    <!-- Tallas -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Tallas</h4>
      <div class="grid grid-cols-3 gap-2">
        {['XS', 'S', 'M', 'L', 'XL', 'XXL'].map(talla => (
          <label class="flex items-center justify-center p-2 border border-gray-300 rounded-lg hover:bg-gray-50 cursor-pointer">
            <input type="checkbox" value={talla} class="filtro-talla-movil mr-2 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
            <span class="text-sm font-medium">{talla}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Colores -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Colores</h4>
      <div class="grid grid-cols-4 gap-3">
        {[
          {nombre: 'Negro', color: 'bg-black'},
          {nombre: 'Blanco', color: 'bg-white border border-gray-300'},
          {nombre: 'Azul', color: 'bg-blue-500'},
          {nombre: 'Rojo', color: 'bg-red-500'},
          {nombre: 'Verde', color: 'bg-green-500'},
          {nombre: 'Amarillo', color: 'bg-yellow-400'},
          {nombre: 'Gris', color: 'bg-gray-500'},
          {nombre: 'Rosa', color: 'bg-pink-400'}
        ].map(color => (
          <label class="flex flex-col items-center cursor-pointer group">
            <input type="checkbox" value={color.nombre.toLowerCase()} class="filtro-color-movil hidden">
            <div class={`w-8 h-8 rounded-full ${color.color} mb-1 border-2 border-transparent group-hover:border-primary-500 transition-colors`}></div>
            <span class="text-xs text-gray-600 text-center">{color.nombre}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Estado del producto -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Estado</h4>
      <div class="space-y-2">
        <label class="flex items-center">
          <input type="checkbox" value="nuevo" class="filtro-estado-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
          <span class="text-sm text-gray-700">Nuevo</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" value="oferta" class="filtro-estado-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
          <span class="text-sm text-gray-700">En oferta</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" value="agotado" class="filtro-estado-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
          <span class="text-sm text-gray-700">Agotado</span>
        </label>
      </div>
    </div>

    <!-- Stock -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Disponibilidad</h4>
      <div class="space-y-2">
        <label class="flex items-center">
          <input type="checkbox" value="en-stock" class="filtro-stock-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
          <span class="text-sm text-gray-700">En stock</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" value="poco-stock" class="filtro-stock-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
          <span class="text-sm text-gray-700">Poco stock (≤5 unidades)</span>
        </label>
        <label class="flex items-center">
          <input type="checkbox" value="agotado-stock" class="filtro-stock-movil mr-3 rounded border-gray-300 text-primary-600 focus:ring-primary-500">
          <span class="text-sm text-gray-700">Sin stock</span>
        </label>
      </div>
    </div>

    <!-- Botones de acción -->
    <div class="flex space-x-3 pt-4 border-t border-gray-200">
      <button id="limpiar-filtros-moviles" class="flex-1 px-4 py-3 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors">
        Limpiar
      </button>
      <button id="aplicar-filtros-moviles" class="flex-1 bg-gradient-to-r from-primary-600 to-primary-700 text-white py-3 px-4 rounded-lg font-semibold hover:from-primary-700 hover:to-primary-800 transition-all duration-200">
        Aplicar
      </button>
    </div>
  </div>
</div>

<style>
  .slider::-webkit-slider-thumb {
    appearance: none;
    height: 20px;
    width: 20px;
    border-radius: 50%;
    background: #4b33a8;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  .slider::-moz-range-thumb {
    height: 20px;
    width: 20px;
    border-radius: 50%;
    background: #4b33a8;
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  .filtro-color-movil:checked + div {
    border-color: #4b33a8;
    border-width: 3px;
  }
</style>

<script>
  // Funcionalidad de filtros móviles
  const abrirFiltrosBtn = document.getElementById('abrir-filtros-moviles');
  const cerrarFiltrosBtn = document.getElementById('cerrar-filtros-moviles');
  const filtrosOverlay = document.getElementById('filtros-moviles-overlay');

  // Abrir filtros móviles
  abrirFiltrosBtn?.addEventListener('click', () => {
    filtrosOverlay?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  });

  // Cerrar filtros móviles
  cerrarFiltrosBtn?.addEventListener('click', () => {
    filtrosOverlay?.classList.add('hidden');
    document.body.style.overflow = 'auto';
  });

  // Cerrar al hacer clic en el overlay
  filtrosOverlay?.addEventListener('click', (e) => {
    if (e.target === filtrosOverlay) {
      filtrosOverlay.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  });

  // Sincronizar filtros móviles con filtros de escritorio
  function sincronizarFiltrosMoviles() {
    // Categorías
    document.querySelectorAll('.filtro-categoria').forEach((checkbox, index) => {
      const movilCheckbox = document.querySelectorAll('.filtro-categoria-movil')[index];
      if (movilCheckbox) {
        movilCheckbox.checked = checkbox.checked;
      }
    });

    // Precio
    const precioSlider = document.getElementById('precio-slider');
    const precioSliderMovil = document.getElementById('precio-slider-movil');
    if (precioSlider && precioSliderMovil) {
      precioSliderMovil.value = precioSlider.value;
      document.getElementById('precio-max-movil').textContent = precioSlider.value;
    }

    // Ordenar
    const ordenarSelect = document.getElementById('ordenar-por');
    const ordenarSelectMovil = document.getElementById('ordenar-por-movil');
    if (ordenarSelect && ordenarSelectMovil) {
      ordenarSelectMovil.value = ordenarSelect.value;
    }

    // Tallas
    document.querySelectorAll('.filtro-talla').forEach((checkbox, index) => {
      const movilCheckbox = document.querySelectorAll('.filtro-talla-movil')[index];
      if (movilCheckbox) {
        movilCheckbox.checked = checkbox.checked;
      }
    });

    // Colores
    document.querySelectorAll('.filtro-color').forEach((checkbox, index) => {
      const movilCheckbox = document.querySelectorAll('.filtro-color-movil')[index];
      if (movilCheckbox) {
        movilCheckbox.checked = checkbox.checked;
      }
    });

    // Estados
    document.querySelectorAll('.filtro-estado').forEach((checkbox, index) => {
      const movilCheckbox = document.querySelectorAll('.filtro-estado-movil')[index];
      if (movilCheckbox) {
        movilCheckbox.checked = checkbox.checked;
      }
    });

    // Stock
    document.querySelectorAll('.filtro-stock').forEach((checkbox, index) => {
      const movilCheckbox = document.querySelectorAll('.filtro-stock-movil')[index];
      if (movilCheckbox) {
        movilCheckbox.checked = checkbox.checked;
      }
    });
  }

  // Sincronizar filtros de escritorio con móviles
  function sincronizarFiltrosEscritorio() {
    // Categorías
    document.querySelectorAll('.filtro-categoria-movil').forEach((checkbox, index) => {
      const escritorioCheckbox = document.querySelectorAll('.filtro-categoria')[index];
      if (escritorioCheckbox) {
        escritorioCheckbox.checked = checkbox.checked;
      }
    });

    // Precio
    const precioSliderMovil = document.getElementById('precio-slider-movil');
    const precioSlider = document.getElementById('precio-slider');
    if (precioSliderMovil && precioSlider) {
      precioSlider.value = precioSliderMovil.value;
      document.getElementById('precio-max').textContent = precioSliderMovil.value;
    }

    // Ordenar
    const ordenarSelectMovil = document.getElementById('ordenar-por-movil');
    const ordenarSelect = document.getElementById('ordenar-por');
    if (ordenarSelectMovil && ordenarSelect) {
      ordenarSelect.value = ordenarSelectMovil.value;
    }

    // Tallas
    document.querySelectorAll('.filtro-talla-movil').forEach((checkbox, index) => {
      const escritorioCheckbox = document.querySelectorAll('.filtro-talla')[index];
      if (escritorioCheckbox) {
        escritorioCheckbox.checked = checkbox.checked;
      }
    });

    // Colores
    document.querySelectorAll('.filtro-color-movil').forEach((checkbox, index) => {
      const escritorioCheckbox = document.querySelectorAll('.filtro-color')[index];
      if (escritorioCheckbox) {
        escritorioCheckbox.checked = checkbox.checked;
      }
    });

    // Estados
    document.querySelectorAll('.filtro-estado-movil').forEach((checkbox, index) => {
      const escritorioCheckbox = document.querySelectorAll('.filtro-estado')[index];
      if (escritorioCheckbox) {
        escritorioCheckbox.checked = checkbox.checked;
      }
    });

    // Stock
    document.querySelectorAll('.filtro-stock-movil').forEach((checkbox, index) => {
      const escritorioCheckbox = document.querySelectorAll('.filtro-stock')[index];
      if (escritorioCheckbox) {
        escritorioCheckbox.checked = checkbox.checked;
      }
    });
  }

  // Aplicar filtros desde móviles
  document.getElementById('aplicar-filtros-moviles')?.addEventListener('click', () => {
    // Sincronizar con filtros de escritorio
    sincronizarFiltrosEscritorio();
    
    // Aplicar filtros
    const aplicarFiltrosBtn = document.getElementById('aplicar-filtros');
    if (aplicarFiltrosBtn) {
      aplicarFiltrosBtn.click();
    }
    
    // Cerrar overlay
    filtrosOverlay?.classList.add('hidden');
    document.body.style.overflow = 'auto';
  });

  // Contar filtros activos
  function contarFiltrosActivos() {
    const checkboxes = document.querySelectorAll('.filtro-categoria-movil, .filtro-talla-movil, .filtro-color-movil, .filtro-estado-movil, .filtro-stock-movil');
    const activos = Array.from(checkboxes).filter(cb => cb.checked && cb.value !== 'todos').length;
    
    const contador = document.getElementById('contador-filtros-moviles');
    if (contador) {
      if (activos > 0) {
        contador.textContent = activos;
        contador.style.display = 'flex';
      } else {
        contador.style.display = 'none';
      }
    }
  }

  // Actualizar contador cuando cambien los filtros
  document.querySelectorAll('.filtro-categoria-movil, .filtro-talla-movil, .filtro-color-movil, .filtro-estado-movil, .filtro-stock-movil').forEach(checkbox => {
    checkbox.addEventListener('change', contarFiltrosActivos);
  });

  // Limpiar filtros desde móviles
  document.getElementById('limpiar-filtros-moviles')?.addEventListener('click', () => {
    const limpiarFiltrosBtn = document.getElementById('limpiar-filtros');
    if (limpiarFiltrosBtn) {
      limpiarFiltrosBtn.click();
    }
    
    // Cerrar overlay
    filtrosOverlay?.classList.add('hidden');
    document.body.style.overflow = 'auto';
    
    // Actualizar contador
    setTimeout(contarFiltrosActivos, 100);
  });

  // Inicializar contador cuando se cargue la página
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', contarFiltrosActivos);
  } else {
    contarFiltrosActivos();
  }
</script> 